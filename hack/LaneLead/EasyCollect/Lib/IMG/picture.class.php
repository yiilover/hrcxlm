<?php
 class picture { public $picture_url; public $dest_url; public $DrawPos = 1; public $DrawX = 30; public $DrawY = 30; public $DrawAlpha = 60; public $DrawAngle = 0; public $DrawPad = 0; public $WaterImg; public $WaterWord; public $FontSize = 16; public $FontColor = "#0066cc"; public $ZoomType = 1; public $ZoomMultiple = 1; public $ZoomWidth = 600; public $ZoomHeight = 400; public $CutType = 1; public $CutX = 0; public $CutY = 0; public $CutWidth = 255; public $CutHeight = 180; public $alpha = '60'; public $circumrotate = "90.0"; protected $picture_create; protected $picture_width; protected $picture_height; protected $picture_type; protected $picture_mime; protected $newimage; protected $FontPath = "font.ttf"; protected $error = array('unalviable' => '没有找到相关图片!'); function __construct($picture_url) { $this -> get_info($picture_url); } function get_info($picture_url) { @$size = getimagesize($picture_url); if (!$size) { exit($this -> error['unalviable']); } $this -> picture_mime = $size['mime']; $this -> picture_width = $size[0]; $this -> picture_height = $size[1]; switch ($size[2]) { case 1: $this -> picture_create = imagecreatefromgif($picture_url); $this -> picture_type = "imagejpeg"; $this -> picture_ext = "jpg"; break; case 2: $this -> picture_create = imagecreatefromjpeg($picture_url); $this -> picture_type = "imagegif"; $this -> picture_ext = "gif"; break; case 3: $this -> picture_create = imagecreatefrompng($picture_url); $this -> picture_type = "imagepng"; $this -> picture_ext = "png"; break; } if (!$this -> dest_url) $this -> dest_url = $picture_url; preg_match_all("/([0-f]){2,2}/i", $this -> FontColor, $matches); if (count($matches[0]) == 3) { $this -> red = hexdec($matches[0][0]); $this -> green = hexdec($matches[0][1]); $this -> blue = hexdec($matches[0][2]); } } function water() { $WaterWord = $this -> WaterWord; $DrawX = $this -> DrawX; $DrawY = $this -> DrawY; $DrawAngle = $this -> DrawAngle; $DrawAlpha = $this -> DrawAlpha; $DrawPad = $this -> DrawPad; if ($WaterWord) { $DrawType = 0; } else { $DrawType = 1; } if (!$DrawType) { $string = $this -> WaterWord; $FontSize = $this -> FontSize; $FontPath = dirname(__file__) . '/' . $this -> FontPath; $bounds = imagettfbbox($FontSize, $DrawAngle, $FontPath, $WaterWord); $font_height = abs($bounds[7] - $bounds[1]); $bounds = imagettfbbox($FontSize, $DrawAngle, $FontPath, $WaterWord); if ($DrawAngle < 0) { $width = abs($bounds[4] - $bounds[0]); $height = abs($bounds[3] - $bounds[7]) + 10; $offset_y = $font_height; $offset_x = 0; } else if ($DrawAngle > 0) { $width = abs($bounds[2] - $bounds[6]); $height = abs($bounds[1] - $bounds[5])+ 10; $offset_y = abs($bounds[7] - $bounds[5]) + $font_height; $offset_x = abs($bounds[0] - $bounds[6]); } else { $width = abs($bounds[4] - $bounds[6]); $height = abs($bounds[7] - $bounds[1])+ 10; $offset_y = $font_height; $offset_x = 0; } $width = $width + ($DrawPad * 2) + 1; $height = $height + ($DrawPad * 2) + 1; if ($type != 'gif' && function_exists('imagecreatetruecolor')) { $image = @imagecreatetruecolor($width, $height); } else { $image = @imagecreate($width, $height); } $BgColor = imagecolorallocate($image, 255, 255, 255); imagefilledrectangle($image, 0, 0, $width, $height, $BgColor); $FontColor = ImageColorAllocate($image, $this -> red, $this -> green, $this -> blue); ImageInterlace($image, false); ImageTTFText($image, $FontSize, $DrawAngle, $offset_x + $DrawPad, $offset_y + $DrawPad, $FontColor, $FontPath, $WaterWord); imagealphablending($this -> picture_create, true); if ($this -> DrawPos == "1") { $DrawX = $this -> picture_width - $width - $DrawX; $DrawY = $this -> picture_height - $height - $DrawY; } imagecopymerge($this -> picture_create, $image, $DrawX, $DrawY, 0, 0, $width , $height, $DrawAlpha); $this -> newimage = $image; picture :: output($this -> picture_create, $this -> dest_url); } else { @$size = getimagesize($this -> WaterImg); if (!$size) { exit($this -> error['unalviable']); } $force_picture_width = $size[0]; $force_picture_height = $size[1]; switch ($size[2]) { case 1: $force_picture_create = imagecreatefromgif($this -> WaterImg); $force_picture_type = "gif"; break; case 2: $force_picture_create = imagecreatefromjpeg($this -> WaterImg); $force_picture_type = "jpg"; break; case 3: $force_picture_create = imagecreatefrompng($this -> WaterImg); $force_picture_type = "png"; break; } if ($force_picture_width > $this -> picture_width || $force_picture_height > $this -> picture_height) { echo "需要加水印的图片的长度或宽度比水印还小,无法生成水印！"; return 0; } if ($this -> DrawPos == "1") { $DrawX = $this -> picture_width - $force_picture_width - $DrawX; $DrawY = $this -> picture_height - $force_picture_height - $DrawY; } imagealphablending($this -> picture_create, true); $force_picture_create = imagerotate ($force_picture_create, $DrawAngle, 0); imagecopymerge($this -> picture_create, $force_picture_create, $DrawX, $DrawY, 0, 0, $force_picture_width , $force_picture_height, $DrawAlpha); $this -> newimage = $image; picture :: output($this -> picture_create, $this -> dest_url); } } function zoom() { if ($this -> ZoomType) { $this -> ZoomWidth = $this -> picture_width * $this -> ZoomMultiple; $this -> ZoomHeight = $this -> picture_height * $this -> ZoomMultiple; } $this -> newimage = imagecreatetruecolor($this -> ZoomWidth, $this -> ZoomHeight); $white = imagecolorallocate($this -> newimage, 255, 255, 255); imagefilledrectangle($this -> newimage, 0, 0, $this -> ZoomWidth, $this -> ZoomHeight, $white); imagecopyresized($this -> newimage, $this -> picture_create, 0, 0, 0, 0, $this -> ZoomWidth, $this -> ZoomHeight, $this -> picture_width, $this -> picture_height); picture :: output($this -> newimage, $this -> dest_url); } function cut($cw,$ch) { if($cw) $this -> CutWidth = $cw; if($ch) $this -> CutHeight = $ch; $resize_ratio = ($this -> CutWidth) / ($this -> CutHeight); $ratio = ($this -> picture_width) / ($this -> picture_height); if (($this -> CutType) == "1") { if ($ratio >= $resize_ratio) { $newimg = imagecreatetruecolor($this -> CutWidth, $this -> CutHeight); imagecopyresampled($newimg, $this -> picture_create,0, 0,$this->CutX, 0,$this -> CutWidth, $this -> CutHeight, (($this -> picture_height) * $resize_ratio), $this -> picture_height); } if ($ratio < $resize_ratio) { $newimg = imagecreatetruecolor($this -> CutWidth, $this -> CutHeight); imagecopyresampled($newimg, $this -> picture_create, 0, 0, 0, $this->CutY,$this -> CutWidth, $this -> CutHeight, $this -> picture_width, (($this -> picture_width) / $resize_ratio)); } } else { if ($ratio >= $resize_ratio) { $newimg = imagecreatetruecolor($this -> CutWidth, ($this -> CutWidth) / $ratio); imagecopyresampled($newimg, $this -> picture_create, 0, 0, 0, 0, $this -> CutWidth, ($this -> CutWidth) / $ratio, $this -> picture_width, $this -> picture_height); } if ($ratio < $resize_ratio) { $newimg = imagecreatetruecolor(($this -> CutHeight) * $ratio, $this -> CutHeight); imagecopyresampled($newimg, $this -> picture_create, 0, 0, 0, 0, ($this -> CutHeight) * $ratio, $this -> CutHeight, $this -> picture_width, $this -> picture_height); } } $this -> newimage = $newimg; picture :: output($this -> newimage, $this -> dest_url); } function alpha() { $width = $this -> picture_width; $height = $this -> picture_height; if (function_exists('imagecreatetruecolor')) { $im = imagecreatetruecolor($width, $height); } else { $im = imagecreate($width, $height); } $backcolor = imagecolorallocate($im, 255, 255, 255); imagefilledrectangle($im, 0, 0, $width, $height, $backcolor); imagealphablending($this -> picture_create, true); imagecopymerge($this -> picture_create, $im, 0, 0, 0, 0, $width ,$height,$this->alpha); $this -> newimage = $im; picture :: output($this -> picture_create, $this -> dest_url); } function turn() { $this -> newimage = imagecreatetruecolor($this -> picture_width, $this -> picture_height); imagecopyresized($this -> newimage, $this -> picture_create, 0, 0, 0, 0, $this -> picture_width, $this -> picture_height, $this -> picture_width, $this -> picture_height); $white = imagecolorallocate($this -> newimage, 255, 255, 255); $this -> newimage = imagerotate ($this -> newimage, $this -> circumrotate, $white); picture :: output($this -> newimage, $this -> dest_url); } protected function output($im, $filename = '') { $imagefun = $this -> picture_type; if (empty($filename)) { $imagefun($im); } else { $imagefun($im, $filename); } } function __destruct() { imagedestroy($this -> newimage); imagedestroy($this -> picture_create); } } ?>
