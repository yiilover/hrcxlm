<?php
class SeoAction extends CommonAction { public function seow() { $seow = M('seow'); import("@.ORG.Page"); $rows = 10; $kw = $this -> _request('kw'); if ($kw) { $sql_where = " sourcew LIKE '%{$kw}%' "; $this -> assign("kw", $kw); } $count = $seow -> where($sql_where) -> count(); $p = new Page($count, $rows); $list = $seow -> limit($p -> firstRow . ',' . $p -> listRows) -> where($sql_where) -> order('id desc') -> select(); $p->parameter = "&kw=".urlencode($kw); $p -> setConfig('header', '同义词条'); $p -> setConfig('prev', "<"); $p -> setConfig('next', '>'); $p -> setConfig('first', '<<'); $p -> setConfig('last', '>>'); $page = $p -> show(); $this -> assign("page", $page); $this -> assign('list', $list); $this -> display(); } public function SaveSeow() { $id = intval($this -> _request('id')); $seow = M('seow'); $save = $this -> _request('save'); if ($save) { $sourcew = trim(auto_charset($this -> _request('sourcew'))); $replacew = trim(auto_charset($this -> _request('replacew'))); if ($sourcew == $replacew) { $this -> error('原词和替换词一致,无需添加!'); } elseif ($havedata = $seow -> where(" sourcew = '{$sourcew}' AND replacew = '{$replacew}' ") -> find()) { $this -> error('数据已经存在,无需重复添加!'); } $data['id'] = $id; $data['sourcew'] = $sourcew; $data['replacew'] = $replacew; $seow -> create($data); if (!$id) { $result = $seow -> add(); } else { $result = $seow -> save(); } $this -> CacheSeo('seow'); if (false !== $result) $this -> success('操作成功,3s后自动返回...'); } $delete = $this -> _request('delete'); if ($id && $delete) { $result = $seow -> delete($id); if (false !== $result) $this -> ajaxReturn($id, '删除成功!', 1); } $savelist = $this -> _request('savelist'); if ($savelist) { $data = $_POST; if (!$data['iddb']) $this -> error('至少选择一个操作对象!'); foreach($data['iddb'] AS $key => $value) { unset($tempData); $tempData['id'] = $key; $tempData['sourcew'] = $sourcew = trim($data['sourcew'][$key]); $tempData['replacew'] = $replacew = trim($data['replacew'][$key]); if ($sourcew == $replacew) { continue; } elseif ($havedata = $seow -> where(" sourcew = '{$sourcew}' AND replacew = '{$replacew}' ") -> find()) { continue; } $seow -> create($tempData); $seow -> save(); } $this -> CacheSeo('seow'); $this -> ajaxReturn($result, '操作成功,3s后自动返回...', 1); } $deletelist = $this -> _request('deletelist'); if ($deletelist) { $data = $_POST; if (!$data['iddb']) $this -> error('至少选择一个操作对象!'); foreach($data['iddb'] AS $key => $value) { $result = $seow -> delete($key); if (false == $result) break; } $this -> CacheSeo('seow'); if (false !== $result) { $this -> success('批量删除成功,3s后自动返回...'); } else { $this -> error('操作失败!'); } } } public function ImportSeow() { @set_time_limit(0); import("@.ORG.UploadFile"); $upload = new UploadFile(); $upload -> savePath = TEMP_PATH; $upload -> allowExts = array('txt'); $upload -> saveRule = 'time'; if (!$upload -> upload()) { $this -> error($upload -> getErrorMsg()); } else { $info = $upload -> getUploadFileInfo(); } $kwfile = TEMP_PATH . $info[0]['savename']; $file = file($kwfile); if ($file) { $i = 0; $seow = M('seow'); foreach ($file as $line) { list($s, $r) = explode("=", $line); if(!is_utf8($s)) { $s = auto_charset($s); $s = auto_charset($r); } $data['sourcew'] = $sourcew = trim($s); $data['replacew'] = $replacew = trim($r); if (!$sourcew || !$replacew || $sourcew == $replacew || $havedata = $seow -> where(" sourcew = '{$sourcew}' ") -> find()) { continue; } $seow -> create($data); $result = $seow -> add(); if ($result) { $i++; } } @unlink($kwfile); $this -> CacheSeo('seow'); } $this -> success("成功添加 $i 组词条,3s后自动返回..."); } public function ExportSeow() { $seow = M('seow'); $list = $seow -> order('id desc') -> select(); $c = ''; foreach($list as $rs) { if(strlen($rs['sourcew'])<=2) continue; $c .= $rs['sourcew'] . "={$rs['replacew']}\r\n"; } $filename = "同义词库.txt"; $encoded_filename = urlencode($filename); $encoded_filename = str_replace("+", "%20", $encoded_filename); header("Content-Type: application/octet-stream"); if (preg_match("/MSIE/", $_SERVER['HTTP_USER_AGENT'])) { header('Content-Disposition:  attachment; filename="' . $encoded_filename . '"'); } elseif (preg_match("/Firefox/", $_SERVER['HTTP_USER_AGENT'])) { header('Content-Disposition: attachment; filename*="utf8' . $filename . '"'); } else { header('Content-Disposition: attachment; filename="' . $filename . '"'); } echo $c; exit; } public function seol() { $seol = D('Seol'); import("@.ORG.Page"); $rows = 10; $kw = $this -> _post('kw'); if ($kw) { $sql_where = " kw LIKE '%{$kw}%' "; $this -> assign("kw", $kw); } $count = $seol -> where($sql_where) -> count(); $p = new Page($count, $rows); $list = $seol -> limit($p -> firstRow . ',' . $p -> listRows) -> where($sql_where) -> order('id desc') -> select(); $p->parameter = "&kw=".urlencode($kw); $p -> setConfig('header', '同义词条'); $p -> setConfig('prev', "<"); $p -> setConfig('next', '>'); $p -> setConfig('first', '<<'); $p -> setConfig('last', '>>'); $page = $p -> show(); $this -> assign("page", $page); $this -> assign('list', $list); $this -> display(); } public function SaveSeol() { $id = intval($this -> _request('id')); $seol = D('Seol'); $save = $this -> _request('save'); if ($save) { $data = $_POST; $data['id'] = $id; $data['kw'] = $kw = trim($data['kw'][$id]); $data['link'] = $link = trim($data['link'][$id]); $data['color'] = $color = trim($data['color'][$id]); $data['bold'] = $bold = trim($data['bold'][$id]); $data['len'] = $len = strlen($kw); if ($kw == $link || !$kw || !$link) { $this -> error('原词和替换词一致,且不能为空!'); } $seol -> create($data); if (!$id) { $result = $seol -> add(); } else { $result = $seol -> save(); } $this -> CacheSeo('seol'); if (false !== $result) $this -> success('操作成功,3s后自动返回...'); } $delete = $this -> _request('delete'); if ($id && $delete) { $result = $seol -> delete($id); if (false !== $result) $this -> ajaxReturn($id, '删除成功!', 1); } $savelist = $this -> _request('savelist'); if ($savelist) { $data = $_POST; if (!$data['iddb']) $this -> error('至少选择一个操作对象!'); foreach($data['iddb'] AS $id => $value) { unset($tempData); $tempData['id'] = $id; $tempData['kw'] = $kw = trim($data['kw'][$id]); $tempData['link'] = $link = trim($data['link'][$id]); $tempData['color'] = $color = trim($data['color'][$id]); $tempData['bold'] = $bold = trim($data['bold'][$id]); $tempData['len'] = $len = strlen($kw); if ($kw == $link || !$kw || !$link) { continue; } $seol -> create($tempData); $seol -> save(); } $this -> CacheSeo('seol'); $this -> ajaxReturn($result, '操作成功,3s后自动返回...', 1); } $deletelist = $this -> _request('deletelist'); if ($deletelist) { $data = $_POST; if (!$data['iddb']) $this -> error('至少选择一个操作对象!'); foreach($data['iddb'] AS $key => $value) { $result = $seol -> delete($key); if (false == $result) break; } $this -> CacheSeo('seol'); if (false !== $result) { $this -> success('批量删除成功,3s后自动返回...'); } else { $this -> error('操作失败!'); } } } public function seop() { $seop = M('seop'); import("@.ORG.Page"); $rows = 5; $kw = $this -> _post('kw'); if ($kw) { $sql_where = " kw LIKE '%{$kw}%' "; $this -> assign("kw", $kw); } $count = $seop -> where($sql_where) -> count(); $p = new Page($count, $rows); $list = $seop -> limit($p -> firstRow . ',' . $p -> listRows) -> where($sql_where) -> order('id desc') -> select(); $p->parameter = "&kw=".urlencode($kw); $p -> setConfig('header', '同义词条'); $p -> setConfig('prev', "<"); $p -> setConfig('next', '>'); $p -> setConfig('first', '<<'); $p -> setConfig('last', '>>'); $page = $p -> show(); $this -> assign("page", $page); $this -> assign('list', $list); $this -> display(); } public function SaveSeop() { $id = intval($this -> _request('id')); $seop = M('seop'); $save = $this -> _request('save'); if ($save) { $data = $_POST; $data['id'] = $id; $data['pcontent'] = $pcontent = trim($data['pcontent'][$id]); $data['position'] = $position = trim($data['position'][$id]); $data['ifshow'] = $ifshow = trim($data['ifshow'][$id]); if (!$pcontent || !$position || !$ifshow) { $this -> error('段落为空或位置属性未选择或前台显示属性未选择!'); } $seop -> create($data); if (!$id) { $result = $seop -> add(); } else { $result = $seop -> save(); } $this -> CacheSeo('seop'); if (false !== $result) $this -> success('操作成功,3s后自动返回...'); } $delete = $this -> _request('delete'); if ($id && $delete) { $result = $seop -> delete($id); if (false !== $result) $this -> ajaxReturn($id, '删除成功!', 1); } $savelist = $this -> _request('savelist'); if ($savelist) { $data = $_POST; if (!$data['iddb']) $this -> error('至少选择一个操作对象!'); foreach($data['iddb'] AS $id => $value) { unset($tempData); $tempData['id'] = $id; $tempData['pcontent'] = $pcontent = trim($data['pcontent'][$id]); $tempData['position'] = $position = trim($data['position'][$id]); $tempData['ifshow'] = $ifshow = trim($data['ifshow'][$id]); if ($pcontent == $position || !$pcontent || !$position) { continue; } $seop -> create($tempData); $seop -> save(); } $this -> CacheSeo('seop'); $this -> ajaxReturn($result, '操作成功,3s后自动返回...', 1); } $deletelist = $this -> _request('deletelist'); if ($deletelist) { $data = $_POST; if (!$data['iddb']) $this -> error('至少选择一个操作对象!'); foreach($data['iddb'] AS $key => $value) { $result = $seop -> delete($key); if (false == $result) break; } $this -> CacheSeo('seop'); if (false !== $result) { $this -> success('批量删除成功,3s后自动返回...'); } else { $this -> error('操作失败!'); } } } public function CacheSeo($type = 'all') { $webdb = auto_charset(F('webdb')); $userdb = auto_charset(F('userdb')); if ($type == 'seow' || $type == 'all') { $seow = M('seow'); $list = $seow -> getField('sourcew,replacew'); F('seow', $list, COMMON_PATH); return true; } if ($type == 'seol' || $type == 'all') { $seol = D('seol'); $list = $seol -> order('len') -> select(); foreach($list as $rs) { if($rs['bold']) $bold = 'bold'; $seolDB[$rs['kw']] = "<a href='{$rs['link']}' style='color:{$rs['color']};font-weight:{$bold};' target='_blank'><strong>{$rs['kw']}</strong></a>"; unset($bold); } F('seol', $seolDB, COMMON_PATH); return true; } if ($type == 'seop' || $type == 'all') { $seop = M('seop'); $replace = array ( '{WebName}'=>"<a href='{$webdb['www_url']}' target='_blank'>{$webdb['webname']}</a>", '{WebURL}'=>"{$webdb['www_url']}", '{UserName}'=>"{$userdb['username']}", '{Contact}'=>"{$webdb['webmail']}" ); $list = $seop -> where('position=1') -> select(); foreach($list as $k=>$rs){ $list[$k]['pcontent'] = strtr($rs['pcontent'] , $replace); } F('seop1', $list, COMMON_PATH); $list = $seop -> where('position=2') -> select(); foreach($list as $k=>$rs){ $list[$k]['pcontent'] = strtr($rs['pcontent'] , $replace); } F('seop2', $list, COMMON_PATH); $list = $seop -> where('position=3') -> select(); foreach($list as $k=>$rs){ $list[$k]['pcontent'] = strtr($rs['pcontent'] , $replace); } F('seop3', $list, COMMON_PATH); return true; } } public function __destruct() { } } ?>