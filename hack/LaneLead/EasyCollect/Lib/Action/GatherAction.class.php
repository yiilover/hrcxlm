<?php
class GatherAction extends CommonAction { public function index() { $runnow = $this -> _request('runnow'); $testgather = $this -> _request('testgather'); $showresult = $this -> _request('showresult'); if ($testgather) $showresult = 1; if ($runnow) { $gcachedir = DATA_PATH . 'gcache/'; if(is_dir($gcachedir)) { LLDelDir($gcachedir); }else{ LLMakePath($gcachedir); } F('gcache/iswrite', 1); if (touch(DATA_PATH . 'gcache/iswrite.php')) { } else { $this -> error('系统错误: 采集缓存文件夹 '.$gcachedir. '不具有写入权限!'); } if ($testgather) F('gcache/testgather', $testgather); if ($ec_id = $this -> _request('ec_id')) { $ec_idDB[] = $ec_id; } elseif ($gatherall = $this -> _request('gatherall')) { $ecrule = D('Ecrule'); $data = $ecrule -> field('ec_id') -> select(); foreach($data AS $key => $vo) { $ec_idDB[] = $vo['ec_id']; } } elseif ($data = $_POST) { foreach($data['ec_iddb'] AS $key => $vo) { if ($vo) $ec_idDB[] = $vo; } } if (!$ec_idDB) F('gcache/taskOver', 1); $tempAarry = array_chunk($ec_idDB, intval(C('thread_num'))); foreach($tempAarry AS $key => $vo) { F('gcache/' . 'ec_idDB' . $key, $vo); } F('gcache/taskid', time()); if ($showresult) F('gcache/totalTask', $ec_idDB); } $ThreadResult = $this -> _get('ThreadResult'); if ($ThreadResult) { $threadKey = intval(F('gcache/threadKey')); $threadcache = M('threadcache'); $DoneThreadNum = $threadcache -> count(); $ec_idDB = F('gcache/ec_idDB' . $threadKey); if ($DoneThreadNum >= count($ec_idDB)) { $threadcache = M(); $threadcache -> execute('TRUNCATE TABLE ' . C('DB_PREFIX') . 'threadcache'); $threadKey++; if ($ec_idDB = F('gcache/ec_idDB' . $threadKey)) { F('gcache/threadKey', $threadKey); sleep(intval(C('sleep_time'))); } else { sleep(intval(C('sleep_time'))); F('gcache/taskOver', 1); if (C('automakehtml') && CMS_AUTOHTML) { _remoteTask(CMS_URL . '/do/index.php?&ch=1&MakeIndex=1'); _remoteTask(CMS_ADMINURL . '/index.php?lfj=html&job=crontab_html&type=all'); } exit; } } else { exit; } } $threadKey = intval(F('gcache/threadKey')); $ec_idDB = F('gcache/ec_idDB' . $threadKey); if ($testgather) { $ec_id = $ec_id?$ec_id:F('gcache/ec_id'); EasyCollectRun($ec_id); } else { import("@.EG.thread"); $thread = new thread(); foreach($ec_idDB AS $key => $ec_id) { $thread -> addthread('EasyCollectRun', "$ec_id"); usleep(mt_rand(100, 5000)); } $thread -> runthread(); } if ($this -> isAjax()) { F('gcache/threadNum', count($ec_idDB)); $this -> ajaxReturn($ec_idDB); } if ($showresult) { if($threaderror = F('threaderror')) { $this -> error('系统不支持多线程采集,请联系蓝锂官方寻求解决方案!'); } F('gcache/threadNum', count($ec_idDB)); $this -> assign('loglist', $ec_idDB); $this -> assign('threadNum', intval(F('gcache/threadNum'))); $this -> assign('totalTask', count(F('gcache/totalTask'))); $this -> assign('testgather', intval($testgather)); if ($testgather) { $this -> assign('ec_id', $ec_id); $curlList = F('gcache/curlDB' . $ec_id); if ($curlList) $curlNum = count($curlList); foreach($curlList AS $curl) { list($curl, $title) = explode("\t", $curl); $temcurlList[] = $curl; $temtitleList[] = $title; } $this -> assign('curlList', $temcurlList); $this -> assign('titleList', $temtitleList); $this -> assign('curlNum', $curlNum); $this -> assign('gstatus', F('gcache/gstatus' . $ec_id)); $this -> assign('gcDB', F('gcache/gcDB' . $ec_id)); $this -> assign('curCurl', F('gcache/curCurl' . $ec_id)); $curlKey = intval(F('gcache/curlKey' . $ec_id)) + 1; $this -> assign('curlKey', $curlKey); } $this -> display(); } } public function testgather() { $ec_id = F('gcache/ec_id'); $curlKey = intval(F('gcache/curlKey' . $ec_id)); $curlKey++; F('gcache/curlKey' . $ec_id, $curlKey); $this -> success('操作成功...'); } public function showresult() { $showresult = $this -> _request('showresult'); if ($showresult) { $this -> assign('loglist', F('gcache/ec_idDB0')); $this -> assign('threadNum', F('gcache/threadNum')); $this -> assign('totalTask', count(F('gcache/totalTask'))); $this -> assign('testgather', 0); $this -> display('index'); exit; } $eclog = D('Eclog'); $taskid = intval(F('gcache/taskid')); $taskOver = intval(F('gcache/taskOver')); if ($taskOver) sleep(1); $doneTask = intval(F('gcache/doneTask')); $threadNum = intval(F('gcache/threadNum')); F('gcache/doneTask', $doneTask + $threadNum); $loglist = $eclog -> field('ec_id,curl,gstatus') -> where("taskid=$taskid") -> order('gtime desc') -> limit('10') -> select(); foreach($loglist AS $key => $logdata) { $ec_id = $logdata['ec_id']; $nowsNum = $eclog -> where("taskid=$taskid AND ec_id=$ec_id AND gstatus=1") -> count("logid"); $ruleDB = F('gcache/ruleDB' . $ec_id); $nowlNum = $ruleDB['rs_limitnum']; $loglist[$key]['nowsNum'] = intval($nowsNum); $loglist[$key]['nowlNum'] = intval($nowlNum); } $totalTask = F('gcache/totalTask'); foreach($totalTask AS $k => $ec_id) { $totalGNum += F('gcache/succesNum' . $ec_id); } $loglist[]['totalGNum'] = intval($totalGNum); $loglist[]['threadNum'] = $threadNum; $loglist[]['doneTask'] = $doneTask + $threadNum; $loglist[]['taskOver'] = $taskOver; if(session('socketerror')==true) { $socketerror=1; }else{ $socketerror=0; } $loglist[]['socketerror'] = $socketerror; $this -> ajaxReturn($loglist, '输出成功', 1); } public function __destruct() { } } ?>
